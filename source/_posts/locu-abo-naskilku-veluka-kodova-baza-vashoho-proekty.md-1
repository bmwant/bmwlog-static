---
title: LOCи, або Наскільки велика кодова база вашого проекту
date: 2016-07-21 15:08:31
tags: [python, kpidata, utils]
author: Misha Behersky
language: ua
---

В нас у KPIdata всі сервіси розділені на компоненти, кожному з яких відповідає окремий репозиторій

![repo list](/old/article/d35f448e63ea3dbf9a9c9fb3fbed944a.png)

Коли кодова база розрослася - стало цікаво, як багато коду було написано, а саме: стандартний показник [loc](https://en.wikipedia.org/wiki/Source_lines_of_code) (кількість рядків коду). Для цього є готовий зручний інструмент [CLOC](https://github.com/AlDanial/cloc). Встановити на Mac можна так

```bash
$ brew install cloc
```

Наявні також релізи і для багатьох інших ОС/пакетних менеджерів. Підтримується близько 200 мов. Подивитися повний список:

```bash
$ clock --show-lang
```

Оскільки нашою основною мовою є Python, було цікаво подивитися статистику саме для нього. Заходимо в папку з проектами і запускаємо

```bash
$ cloc --exclude-dir=venv --include-lang=Python .
```

![output](/old/article/842ba6e6ba823265b87a969d0bda757c.png)

За допомогою `--exclude-dir` можна задати папки, які не потрібно враховувати (в даному випадку, щоб бачити статистику лише по своєму коду, без сторонніх бібліотек). Аналогічно для _Javascript_ можна заігнорувати `node_modules` чи `vendor` папки.

`--include-lang` - список мов, які потрібно опрацювати, в даному випадку лише одна. Останнім параметром йде шлях до папки, дерево якої потрібно просканувати (крапка означає поточну директорію).

Майже `19К` рядків власного коду, не враховуючи коментарі. Досить непогано! В наступному пості про _KPIdata_, покажу який в нас code coverage, що буде не дуже вражаючим, але тим не менш, розгляну, які інструменти ми для цього використовуємо.

### Ресурси

* `http://kpidata.org` - Сайт KPIdata
* [Наші репозиторії на github](https://github.com/kpidata/)
